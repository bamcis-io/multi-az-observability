"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InsightRuleBody = void 0;
/**
 * The insight rule body to be included in a CfnInsightRule construct
 */
class InsightRuleBody {
    /**
     * Converts the rule to a JSON string
     * @returns
     */
    toJson() {
        return JSON.stringify(this);
    }
    constructor() {
        this.schema = {
            name: "CloudWatchLogRule",
            version: 1
        };
        this.aggregateOn = "";
        this.contribution = {
            keys: []
        };
        this.logFormat = "";
        this.logGroupNames = [];
    }
}
exports.InsightRuleBody = InsightRuleBody;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5zaWdodFJ1bGVCb2R5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiSW5zaWdodFJ1bGVCb2R5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOztHQUVHO0FBQ0gsTUFBYSxlQUFlO0lBMkJ4Qjs7O09BR0c7SUFDSCxNQUFNO1FBQ0YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRDtRQUVJLElBQUksQ0FBQyxNQUFNLEdBQUc7WUFDVixJQUFJLEVBQUUsbUJBQW1CO1lBQ3pCLE9BQU8sRUFBRSxDQUFDO1NBQ2IsQ0FBQztRQUNGLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxZQUFZLEdBQUc7WUFDaEIsSUFBSSxFQUFFLEVBQWM7U0FDSSxDQUFDO1FBQzdCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDO0lBQzVCLENBQUM7Q0FDSjtBQWhERCwwQ0FnREMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBpbnNpZ2h0IHJ1bGUgYm9keSB0byBiZSBpbmNsdWRlZCBpbiBhIENmbkluc2lnaHRSdWxlIGNvbnN0cnVjdFxuICovXG5leHBvcnQgY2xhc3MgSW5zaWdodFJ1bGVCb2R5XG57XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIG9mIFNjaGVtYSBmb3IgYSBydWxlIHRoYXQgYW5hbHl6ZXMgQ2xvdWRXYXRjaCBMb2dzIGRhdGEgbXVzdCBhbHdheXMgYmUge1wiTmFtZVwiOiBcIkNsb3VkV2F0Y2hMb2dSdWxlXCIsIFwiVmVyc2lvblwiOiAxfVxuICAgICAqL1xuICAgIHNjaGVtYTogSVJ1bGVTY2hlbWE7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBzdHJpbmdzLiBGb3IgZWFjaCBlbGVtZW50IGluIHRoZSBhcnJheSwgeW91IGNhbiBvcHRpb25hbGx5IHVzZSAqIGF0IHRoZSBlbmQgb2YgYSBzdHJpbmcgdG8gaW5jbHVkZSBhbGwgbG9nIGdyb3VwcyB3aXRoIG5hbWVzIHRoYXQgc3RhcnQgd2l0aCB0aGF0IHByZWZpeC4gXG4gICAgICovXG4gICAgbG9nR3JvdXBOYW1lczogc3RyaW5nW107XG5cbiAgICAvKipcbiAgICAgKiBWYWxpZCB2YWx1ZXMgYXJlIEpTT04gYW5kIENMRi5cbiAgICAgKi9cbiAgICBsb2dGb3JtYXQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFZhbGlkIHZhbHVlcyBhcmUgQ291bnQgYW5kIFN1bS4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gYWdncmVnYXRlIHRoZSByZXBvcnQgYmFzZWQgb24gYSBjb3VudCBvZiBvY2N1cnJlbmNlcyBvciBhIHN1bSBvZiB0aGUgdmFsdWVzIG9mIHRoZSBmaWVsZCB0aGF0IGlzIHNwZWNpZmllZCBpbiB0aGUgVmFsdWVPZiBmaWVsZC4gXG4gICAgICovXG4gICAgYWdncmVnYXRlT246IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoaXMgb2JqZWN0IGluY2x1ZGVzIGEgS2V5cyBhcnJheSB3aXRoIGFzIG1hbnkgYXMgZm91ciBtZW1iZXJzLCBvcHRpb25hbGx5IGEgc2luZ2xlIFZhbHVlT2YsIGFuZCBvcHRpb25hbGx5IGFuIGFycmF5IG9mIGFzIG1hbnkgYXMgZm91ciBGaWx0ZXJzLiBcbiAgICAgKi9cbiAgICBjb250cmlidXRpb246IElDb250cmlidXRpb25EZWZpbml0aW9uO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIHJ1bGUgdG8gYSBKU09OIHN0cmluZ1xuICAgICAqIEByZXR1cm5zIFxuICAgICAqL1xuICAgIHRvSnNvbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcyk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKVxuICAgIHtcbiAgICAgICAgdGhpcy5zY2hlbWEgPSB7XG4gICAgICAgICAgICBuYW1lOiBcIkNsb3VkV2F0Y2hMb2dSdWxlXCIsXG4gICAgICAgICAgICB2ZXJzaW9uOiAxXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWdncmVnYXRlT24gPSBcIlwiO1xuICAgICAgICB0aGlzLmNvbnRyaWJ1dGlvbiA9IHtcbiAgICAgICAgICAgIGtleXM6IFtdIGFzIHN0cmluZ1tdXG4gICAgICAgIH0gYXMgSUNvbnRyaWJ1dGlvbkRlZmluaXRpb247XG4gICAgICAgIHRoaXMubG9nRm9ybWF0ID0gXCJcIjtcbiAgICAgICAgdGhpcy5sb2dHcm91cE5hbWVzID0gW107XG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSdWxlU2NoZW1hXG57XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIHJ1bGUgc2NoZW1hLCB0aGlzIHNob3VsZCBicmUgQ2xvdWRXYXRjaExvZ1J1bGVcbiAgICAgKi9cbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdmVyc2lvbiBudW1iZXIgb2YgdGhlIHNjaGVtYSwgdGhpcyBzaG91bGQgYmUgMVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZlcnNpb246IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQ29udHJpYnV0aW9uRGVmaW5pdGlvblxue1xuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIHVwIHRvIGZvdXIgbG9nIGZpZWxkcyB0aGF0IGFyZSB1c2VkIGFzIGRpbWVuc2lvbnMgdG8gY2xhc3NpZnkgY29udHJpYnV0b3JzLiBcbiAgICAgKiBJZiB5b3UgZW50ZXIgbW9yZSB0aGFuIG9uZSBrZXksIGVhY2ggdW5pcXVlIGNvbWJpbmF0aW9uIG9mIHZhbHVlcyBmb3IgdGhlIGtleXMgaXMgY291bnRlZCBcbiAgICAgKiBhcyBhIHVuaXF1ZSBjb250cmlidXRvci4gVGhlIGZpZWxkcyBtdXN0IGJlIHNwZWNpZmllZCB1c2luZyBKU09OIHByb3BlcnR5IGZvcm1hdCBub3RhdGlvbi4gXG4gICAgICovXG4gICAga2V5czogc3RyaW5nW107XG4gICAgXG4gICAgLyoqXG4gICAgICogKE9wdGlvbmFsKSBTcGVjaWZ5IHRoaXMgb25seSB3aGVuIHlvdSBhcmUgc3BlY2lmeWluZyBTdW0gYXMgdGhlIHZhbHVlIG9mIEFnZ3JlZ2F0ZU9uLiBcbiAgICAgKiBWYWx1ZU9mIHNwZWNpZmllcyBhIGxvZyBmaWVsZCB3aXRoIG51bWVyaWNhbCB2YWx1ZXMuIEluIHRoaXMgdHlwZSBvZiBydWxlLCB0aGUgY29udHJpYnV0b3JzIFxuICAgICAqIGFyZSByYW5rZWQgYnkgdGhlaXIgc3VtIG9mIHRoZSB2YWx1ZSBvZiB0aGlzIGZpZWxkLCBpbnN0ZWFkIG9mIHRoZWlyIG51bWJlciBvZiBvY2N1cnJlbmNlcyBcbiAgICAgKiBpbiB0aGUgbG9nIGVudHJpZXMuIEZvciBleGFtcGxlLCBpZiB5b3Ugd2FudCB0byBzb3J0IGNvbnRyaWJ1dG9ycyBieSB0aGVpciB0b3RhbCBCeXRlc1NlbnQgXG4gICAgICogb3ZlciBhIHBlcmlvZCwgeW91IHdvdWxkIHNldCBWYWx1ZU9mIHRvIEJ5dGVzU2VudCBhbmQgc3BlY2lmeSBTdW0gZm9yIEFnZ3JlZ2F0ZU9uLiBJZiB0aGlzXG4gICAgICogdmFsdWUgaXMgbm90IHNldCwgaXQgbXVzdCBub3QgYmUgaW5jbHVkZWQgaW4gdGhlIEpTT04gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBydWxlIGJvZHkuXG4gICAgICovXG4gICAgdmFsdWVPZj86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIChPcHRpb25hbCkgU3BlY2lmaWVzIGFuIGFycmF5IG9mIGFzIG1hbnkgYXMgZm91ciBmaWx0ZXJzIHRvIG5hcnJvdyB0aGUgbG9nIGV2ZW50cyBcbiAgICAgKiB0aGF0IGFyZSBpbmNsdWRlZCBpbiB0aGUgcmVwb3J0LiBJZiB5b3Ugc3BlY2lmeSBtdWx0aXBsZSBmaWx0ZXJzLCBDb250cmlidXRvciBJbnNpZ2h0cyBcbiAgICAgKiBldmFsdWF0ZXMgdGhlbSB3aXRoIGEgbG9naWNhbCBBTkQgb3BlcmF0b3IuIFlvdSBjYW4gdXNlIHRoaXMgdG8gZmlsdGVyIG91dCBpcnJlbGV2YW50IFxuICAgICAqIGxvZyBldmVudHMgaW4geW91ciBzZWFyY2ggb3IgeW91IGNhbiB1c2UgaXQgdG8gc2VsZWN0IGEgc2luZ2xlIGNvbnRyaWJ1dG9yIHRvIGFuYWx5emUgdGhlaXIgYmVoYXZpb3IuXG4gICAgICovXG4gICAgZmlsdGVycz86IHtba2V5OiBzdHJpbmddOiBhbnl9W107XG59Il19