"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseOperationZonalAlarmsAndRules = void 0;
const constructs_1 = require("constructs");
const AvailabilityAndLatencyAlarmsAndRules_1 = require("./AvailabilityAndLatencyAlarmsAndRules");
/**
 * The base operation regional alarms and rules
 */
class BaseOperationZonalAlarmsAndRules extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.availabilityZoneId = props.availabilityZoneId;
        this.availabilityAlarm = AvailabilityAndLatencyAlarmsAndRules_1.AvailabilityAndLatencyAlarmsAndRules.createZonalAvailabilityAlarm(this, props.availabilityMetricDetails, props.availabilityZoneId, props.counter, props.nameSuffix);
        this.latencyAlarm = AvailabilityAndLatencyAlarmsAndRules_1.AvailabilityAndLatencyAlarmsAndRules.createZonalLatencyAlarm(this, props.latencyMetricDetails, props.availabilityZoneId, props.counter, props.nameSuffix);
        this.availabilityOrLatencyAlarm = AvailabilityAndLatencyAlarmsAndRules_1.AvailabilityAndLatencyAlarmsAndRules.createZonalAvailabilityOrLatencyCompositeAlarm(this, props.availabilityMetricDetails.operationName, props.availabilityZoneId, props.counter, this.availabilityAlarm, this.latencyAlarm, props.nameSuffix);
        this.availabilityZoneIsOutlierForFaults = AvailabilityAndLatencyAlarmsAndRules_1.AvailabilityAndLatencyAlarmsAndRules.createZonalFaultRateOutlierAlarm(this, props.availabilityMetricDetails, props.availabilityZoneId, props.counter, props.outlierThreshold, props.nameSuffix);
        this.availabilityZoneIsOutlierForLatency = AvailabilityAndLatencyAlarmsAndRules_1.AvailabilityAndLatencyAlarmsAndRules.createZonalHighLatencyOutlierAlarm(this, props.latencyMetricDetails, props.availabilityZoneId, props.counter, props.outlierThreshold, props.nameSuffix);
    }
}
exports.BaseOperationZonalAlarmsAndRules = BaseOperationZonalAlarmsAndRules;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZU9wZXJhdGlvblpvbmFsQWxhcm1zQW5kUnVsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJCYXNlT3BlcmF0aW9uWm9uYWxBbGFybXNBbmRSdWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQ0FBdUM7QUFFdkMsaUdBQThGO0FBSTlGOztHQUVHO0FBQ0gsTUFBc0IsZ0NBQWlDLFNBQVEsc0JBQVM7SUFnQ3BFLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBNEM7UUFFbEYsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUNoQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUFDO1FBQ25ELElBQUksQ0FBQyxpQkFBaUIsR0FBRywyRUFBb0MsQ0FBQyw0QkFBNEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLHlCQUF5QixFQUFFLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3TCxJQUFJLENBQUMsWUFBWSxHQUFHLDJFQUFvQyxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzlLLElBQUksQ0FBQywwQkFBMEIsR0FBRywyRUFBb0MsQ0FBQyw4Q0FBOEMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLHlCQUF5QixDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDalIsSUFBSSxDQUFDLGtDQUFrQyxHQUFHLDJFQUFvQyxDQUFDLGdDQUFnQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMseUJBQXlCLEVBQUUsS0FBSyxDQUFDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMxTyxJQUFJLENBQUMsbUNBQW1DLEdBQUcsMkVBQW9DLENBQUMsa0NBQWtDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzVPLENBQUM7Q0FDSjtBQTFDRCw0RUEwQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgSUFsYXJtIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1jbG91ZHdhdGNoXCI7XG5pbXBvcnQgeyBBdmFpbGFiaWxpdHlBbmRMYXRlbmN5QWxhcm1zQW5kUnVsZXMgfSBmcm9tIFwiLi9BdmFpbGFiaWxpdHlBbmRMYXRlbmN5QWxhcm1zQW5kUnVsZXNcIjtcbmltcG9ydCB7IEJhc2VPcGVyYXRpb25ab25hbEFsYXJtc0FuZFJ1bGVzUHJvcHMgfSBmcm9tIFwiLi9wcm9wcy9CYXNlT3BlcmF0aW9uWm9uYWxBbGFybXNBbmRSdWxlc1Byb3BzXCI7XG5pbXBvcnQgeyBJQmFzZU9wZXJhdGlvblpvbmFsQWxhcm1zQW5kUnVsZXMgfSBmcm9tIFwiLi9JQmFzZU9wZXJhdGlvblpvbmFsQWxhcm1zQW5kUnVsZXNcIjtcblxuLyoqXG4gKiBUaGUgYmFzZSBvcGVyYXRpb24gcmVnaW9uYWwgYWxhcm1zIGFuZCBydWxlc1xuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZU9wZXJhdGlvblpvbmFsQWxhcm1zQW5kUnVsZXMgZXh0ZW5kcyBDb25zdHJ1Y3QgaW1wbGVtZW50cyBJQmFzZU9wZXJhdGlvblpvbmFsQWxhcm1zQW5kUnVsZXNcbntcbiAgICAvKipcbiAgICAgKiBDb21wb3NpdGUgYWxhcm0gZm9yIGVpdGhlciBhdmFpbGFiaWx0aXkgb3IgbGF0ZW5jeSBpbXBhY3QgdG8gdGhpcyBvcGVyYXRpb25cbiAgICAgKi9cbiAgICBhdmFpbGFiaWxpdHlPckxhdGVuY3lBbGFybTogSUFsYXJtO1xuXG4gICAgLyoqXG4gICAgICogQXZhaWxhYmlsaXR5IGFsYXJtIGZvciB0aGlzIG9wZXJhdGlvblxuICAgICAqL1xuICAgIGF2YWlsYWJpbGl0eUFsYXJtOiBJQWxhcm07XG5cbiAgICAvKipcbiAgICAgKiBMYXRlbmN5IGFsYXJtIGZvciB0aGlzIG9wZXJhdGlvblxuICAgICAqL1xuICAgIGxhdGVuY3lBbGFybTogSUFsYXJtO1xuXG4gICAgLyoqXG4gICAgICogQWxhcm0gdGhhdCBpbmRpY2F0ZXMgdGhhdCB0aGlzIEFaIGlzIGFuIG91dGxpZXIgZm9yIGZhdWx0IHJhdGVcbiAgICAgKi9cbiAgICBhdmFpbGFiaWxpdHlab25lSXNPdXRsaWVyRm9yRmF1bHRzOiBJQWxhcm07XG5cbiAgICAvKipcbiAgICAgKiBBbGFybSB0aGF0IGluZGljYXRlcyB0aGlzIEFaIGlzIGFuIG91dGxpZXIgZm9yIGhpZ2ggbGF0ZW5jeVxuICAgICAqL1xuICAgIGF2YWlsYWJpbGl0eVpvbmVJc091dGxpZXJGb3JMYXRlbmN5OiBJQWxhcm07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgQXZhaWxhYmlsaXR5IFpvbmUgSWQgZm9yIHRoZSBhbGFybXMgYW5kIHJ1bGVzXG4gICAgICovXG4gICAgYXZhaWxhYmlsaXR5Wm9uZUlkOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQmFzZU9wZXJhdGlvblpvbmFsQWxhcm1zQW5kUnVsZXNQcm9wcylcbiAgICB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZClcbiAgICAgICAgdGhpcy5hdmFpbGFiaWxpdHlab25lSWQgPSBwcm9wcy5hdmFpbGFiaWxpdHlab25lSWQ7XG4gICAgICAgIHRoaXMuYXZhaWxhYmlsaXR5QWxhcm0gPSBBdmFpbGFiaWxpdHlBbmRMYXRlbmN5QWxhcm1zQW5kUnVsZXMuY3JlYXRlWm9uYWxBdmFpbGFiaWxpdHlBbGFybSh0aGlzLCBwcm9wcy5hdmFpbGFiaWxpdHlNZXRyaWNEZXRhaWxzLCBwcm9wcy5hdmFpbGFiaWxpdHlab25lSWQsIHByb3BzLmNvdW50ZXIsIHByb3BzLm5hbWVTdWZmaXgpO1xuICAgICAgICB0aGlzLmxhdGVuY3lBbGFybSA9IEF2YWlsYWJpbGl0eUFuZExhdGVuY3lBbGFybXNBbmRSdWxlcy5jcmVhdGVab25hbExhdGVuY3lBbGFybSh0aGlzLCBwcm9wcy5sYXRlbmN5TWV0cmljRGV0YWlscywgcHJvcHMuYXZhaWxhYmlsaXR5Wm9uZUlkLCBwcm9wcy5jb3VudGVyLCBwcm9wcy5uYW1lU3VmZml4KTtcbiAgICAgICAgdGhpcy5hdmFpbGFiaWxpdHlPckxhdGVuY3lBbGFybSA9IEF2YWlsYWJpbGl0eUFuZExhdGVuY3lBbGFybXNBbmRSdWxlcy5jcmVhdGVab25hbEF2YWlsYWJpbGl0eU9yTGF0ZW5jeUNvbXBvc2l0ZUFsYXJtKHRoaXMsIHByb3BzLmF2YWlsYWJpbGl0eU1ldHJpY0RldGFpbHMub3BlcmF0aW9uTmFtZSwgcHJvcHMuYXZhaWxhYmlsaXR5Wm9uZUlkLCBwcm9wcy5jb3VudGVyLCB0aGlzLmF2YWlsYWJpbGl0eUFsYXJtLCB0aGlzLmxhdGVuY3lBbGFybSwgcHJvcHMubmFtZVN1ZmZpeCk7XG4gICAgICAgIHRoaXMuYXZhaWxhYmlsaXR5Wm9uZUlzT3V0bGllckZvckZhdWx0cyA9IEF2YWlsYWJpbGl0eUFuZExhdGVuY3lBbGFybXNBbmRSdWxlcy5jcmVhdGVab25hbEZhdWx0UmF0ZU91dGxpZXJBbGFybSh0aGlzLCBwcm9wcy5hdmFpbGFiaWxpdHlNZXRyaWNEZXRhaWxzLCBwcm9wcy5hdmFpbGFiaWxpdHlab25lSWQsIHByb3BzLmNvdW50ZXIsIHByb3BzLm91dGxpZXJUaHJlc2hvbGQsIHByb3BzLm5hbWVTdWZmaXgpO1xuICAgICAgICB0aGlzLmF2YWlsYWJpbGl0eVpvbmVJc091dGxpZXJGb3JMYXRlbmN5ID0gQXZhaWxhYmlsaXR5QW5kTGF0ZW5jeUFsYXJtc0FuZFJ1bGVzLmNyZWF0ZVpvbmFsSGlnaExhdGVuY3lPdXRsaWVyQWxhcm0odGhpcywgcHJvcHMubGF0ZW5jeU1ldHJpY0RldGFpbHMsIHByb3BzLmF2YWlsYWJpbGl0eVpvbmVJZCwgcHJvcHMuY291bnRlciwgcHJvcHMub3V0bGllclRocmVzaG9sZCwgcHJvcHMubmFtZVN1ZmZpeCk7XG4gICAgfVxufSJdfQ==