"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperationAlarmsAndRules = void 0;
const constructs_1 = require("constructs");
const ServerSideOperationRegionalAlarmsAndRules_1 = require("./ServerSideOperationRegionalAlarmsAndRules");
const CanaryOperationRegionalAlarmsAndRules_1 = require("./CanaryOperationRegionalAlarmsAndRules");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const ServerSideOperationZonalAlarmsAndRules_1 = require("./ServerSideOperationZonalAlarmsAndRules");
const MultiAvailabilityZoneObservability_1 = require("../MultiAvailabilityZoneObservability");
/**
 * Creates alarms and rules for an operation for both regional and zonal metrics
 */
class OperationAlarmsAndRules extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.serverSideZonalAlarmsAndRules = [];
        this.canaryZonalAlarmsAndRules = [];
        this.aggregateZonalAlarms = [];
        this.operation = props.operation;
        let azMapper = new MultiAvailabilityZoneObservability_1.AvailabilityZoneMapper(this, "AZMapper", {
            availabilityZoneNames: props.operation.service.availabilityZoneNames
        });
        let loadBalancerArn = props.loadBalancer.loadBalancerArn;
        this.serverSideRegionalAlarmsAndRules = new ServerSideOperationRegionalAlarmsAndRules_1.ServerSideOperationRegionalAlarmsAndRules(this, props.operation.operationName + "ServerSideRegionalAlarms", {
            availabilityMetricDetails: props.operation.serverSideAvailabilityMetricDetails,
            latencyMetricDetails: props.operation.serverSideLatencyMetricDetails,
            contributorInsightRuleDetails: props.operation.serverSideContributorInsightRuleDetails,
            nameSuffix: "-server"
        });
        if (props.operation.canaryMetricDetails !== undefined && props.operation.canaryMetricDetails != null) {
            this.canaryRegionalAlarmsAndRules = new CanaryOperationRegionalAlarmsAndRules_1.CanaryOperationRegionalAlarmsAndRules(this, props.operation.operationName + "CanaryRegionalAlarms", {
                availabilityMetricDetails: props.operation.canaryMetricDetails.canaryAvailabilityMetricDetails,
                latencyMetricDetails: props.operation.canaryMetricDetails.canaryLatencyMetricDetails,
                contributorInsightRuleDetails: props.operation.canaryMetricDetails.canaryContributorInsightRuleDetails,
                nameSuffix: "-canary"
            });
        }
        if (this.canaryRegionalAlarmsAndRules !== undefined) {
            this.aggregateRegionalAlarm = new aws_cloudwatch_1.CompositeAlarm(this, props.operation.operationName + "AggregateRegionalAlarm", {
                actionsEnabled: false,
                compositeAlarmName: aws_cdk_lib_1.Fn.ref("AWS::Region") + "-" + props.operation.operationName.toLowerCase() + "-" + "aggregate-alarm",
                alarmRule: aws_cloudwatch_1.AlarmRule.anyOf(this.serverSideRegionalAlarmsAndRules.availabilityOrLatencyAlarm, this.canaryRegionalAlarmsAndRules.availabilityOrLatencyAlarm)
            });
        }
        else {
            this.aggregateRegionalAlarm = this.serverSideRegionalAlarmsAndRules.availabilityOrLatencyAlarm;
        }
        let counter = 1;
        for (let i = 0; i < props.operation.service.availabilityZoneNames.length; i++) {
            let availabilityZoneId = azMapper.availabilityZoneId(props.operation.service.availabilityZoneNames[i]);
            this.serverSideZonalAlarmsAndRules.push(new ServerSideOperationZonalAlarmsAndRules_1.ServerSideOperationZonalAlarmsAndRules(this, props.operation.operationName + "AZ" + counter + "ServerSideZonalAlarmsAndRules", {
                availabilityZoneId: availabilityZoneId,
                availabilityMetricDetails: props.operation.serverSideAvailabilityMetricDetails,
                latencyMetricDetails: props.operation.serverSideLatencyMetricDetails,
                contributorInsightRuleDetails: props.operation.serverSideContributorInsightRuleDetails,
                counter: counter,
                outlierThreshold: props.outlierThreshold,
                outlierDetectionAlgorithm: props.outlierDetectionAlgorithm,
                nameSuffix: "-server",
                operation: props.operation
            }));
            if (props.operation.canaryMetricDetails !== undefined && props.operation.canaryMetricDetails != null) {
                this.canaryZonalAlarmsAndRules.push(new ServerSideOperationZonalAlarmsAndRules_1.ServerSideOperationZonalAlarmsAndRules(this, props.operation.operationName + "AZ" + counter + "CanaryZonalAlarmsAndRules", {
                    availabilityZoneId: availabilityZoneId,
                    availabilityMetricDetails: props.operation.canaryMetricDetails.canaryAvailabilityMetricDetails,
                    latencyMetricDetails: props.operation.canaryMetricDetails.canaryLatencyMetricDetails,
                    contributorInsightRuleDetails: props.operation.canaryMetricDetails.canaryContributorInsightRuleDetails,
                    counter: counter,
                    outlierThreshold: props.outlierThreshold,
                    outlierDetectionAlgorithm: props.outlierDetectionAlgorithm,
                    nameSuffix: "-canary",
                    operation: props.operation
                }));
                this.aggregateZonalAlarms.push(new aws_cloudwatch_1.CompositeAlarm(this, props.operation.operationName + "AZ" + counter + "AggregateZonalIsolatedImpactAlarm", {
                    compositeAlarmName: availabilityZoneId + "-" + props.operation.operationName.toLowerCase() + "-aggregate-isolated-az-impact",
                    alarmRule: aws_cloudwatch_1.AlarmRule.anyOf(this.canaryZonalAlarmsAndRules[i].isolatedImpactAlarm, this.serverSideZonalAlarmsAndRules[i].isolatedImpactAlarm),
                    actionsEnabled: false,
                    alarmDescription: "{\"loadBalancer\":\"" + loadBalancerArn + "\",\"az-id\":\"" + availabilityZoneId + "\"}"
                }));
            }
            else {
                this.aggregateZonalAlarms.push(this.serverSideZonalAlarmsAndRules[i].isolatedImpactAlarm);
            }
            counter++;
        }
    }
}
exports.OperationAlarmsAndRules = OperationAlarmsAndRules;
//# sourceMappingURL=data:application/json;base64,