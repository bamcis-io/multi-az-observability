"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerSideOperationZonalAlarmsAndRules = void 0;
const BaseOperationZonalAlarmsAndRules_1 = require("./BaseOperationZonalAlarmsAndRules");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const AvailabilityAndLatencyAlarmsAndRules_1 = require("./AvailabilityAndLatencyAlarmsAndRules");
/**
 * The server side alarms and rules for an operation in an Availability Zone
 */
class ServerSideOperationZonalAlarmsAndRules extends BaseOperationZonalAlarmsAndRules_1.BaseOperationZonalAlarmsAndRules {
    constructor(scope, id, props) {
        super(scope, id, props);
        if (props.contributorInsightRuleDetails !== undefined && props.contributorInsightRuleDetails != null) {
            this.instancesHandlingRequestsInThisAZ = AvailabilityAndLatencyAlarmsAndRules_1.AvailabilityAndLatencyAlarmsAndRules.createServerSideInstancesHandlingRequestsInThisAZRule(this, props.availabilityMetricDetails.operationName, props.availabilityZoneId, props.contributorInsightRuleDetails, props.counter, props.nameSuffix);
            this.instanceContributorsToFaultsInThisAZ = AvailabilityAndLatencyAlarmsAndRules_1.AvailabilityAndLatencyAlarmsAndRules.createServerSideInstanceFaultContributorsInThisAZRule(this, props.availabilityMetricDetails.operationName, props.availabilityZoneId, props.contributorInsightRuleDetails, props.counter, props.nameSuffix);
            this.multipleInstancesProducingFaultsInThisAvailabilityZone = AvailabilityAndLatencyAlarmsAndRules_1.AvailabilityAndLatencyAlarmsAndRules.createServerSideZonalMoreThanOneInstanceProducingFaultsAlarm(this, props.availabilityMetricDetails, props.availabilityZoneId, props.counter, props.outlierThreshold, this.instanceContributorsToFaultsInThisAZ, this.instancesHandlingRequestsInThisAZ, props.nameSuffix);
            this.instanceContributorsToHighLatencyInThisAZ = AvailabilityAndLatencyAlarmsAndRules_1.AvailabilityAndLatencyAlarmsAndRules.createServerSideInstanceHighLatencyContributorsInThisAZRule(this, props.latencyMetricDetails, props.availabilityZoneId, props.contributorInsightRuleDetails, props.counter, props.nameSuffix);
            this.multipleInstancesProducingHighLatencyInThisAZ = AvailabilityAndLatencyAlarmsAndRules_1.AvailabilityAndLatencyAlarmsAndRules.createServerSideZonalMoreThanOneInstanceProducingHighLatencyAlarm(this, props.latencyMetricDetails, props.availabilityZoneId, props.counter, props.outlierThreshold, this.instanceContributorsToHighLatencyInThisAZ, this.instancesHandlingRequestsInThisAZ, props.nameSuffix);
            this.isolatedImpactAlarm = AvailabilityAndLatencyAlarmsAndRules_1.AvailabilityAndLatencyAlarmsAndRules.createServerSideIsolatedAZImpactAlarm(this, props.availabilityMetricDetails.operationName, props.availabilityZoneId, props.counter, this.availabilityZoneIsOutlierForFaults, this.availabilityAlarm, this.multipleInstancesProducingFaultsInThisAvailabilityZone, this.availabilityZoneIsOutlierForLatency, this.latencyAlarm, this.multipleInstancesProducingHighLatencyInThisAZ, props.nameSuffix);
        }
        else {
            this.isolatedImpactAlarm = new aws_cloudwatch_1.CompositeAlarm(scope, props.operation.operationName + "AZ" + props.counter + "IsolatedImpactAlarm" + props.nameSuffix, {
                compositeAlarmName: props.availabilityZoneId + `-${props.operation.operationName.toLowerCase()}-isolated-impact-alarm` + props.nameSuffix,
                alarmRule: aws_cloudwatch_1.AlarmRule.anyOf(aws_cloudwatch_1.AlarmRule.allOf(this.availabilityZoneIsOutlierForFaults, this.availabilityAlarm), aws_cloudwatch_1.AlarmRule.allOf(this.availabilityZoneIsOutlierForLatency, this.latencyAlarm)),
                actionsEnabled: false
            });
        }
    }
}
exports.ServerSideOperationZonalAlarmsAndRules = ServerSideOperationZonalAlarmsAndRules;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VydmVyU2lkZU9wZXJhdGlvblpvbmFsQWxhcm1zQW5kUnVsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJTZXJ2ZXJTaWRlT3BlcmF0aW9uWm9uYWxBbGFybXNBbmRSdWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx5RkFBc0Y7QUFFdEYsK0RBQStGO0FBQy9GLGlHQUE4RjtBQUc5Rjs7R0FFRztBQUNILE1BQWEsc0NBQXVDLFNBQVEsbUVBQWdDO0lBcUN4RixZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQWtEO1FBRXhGLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLElBQUksS0FBSyxDQUFDLDZCQUE2QixLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsNkJBQTZCLElBQUksSUFBSSxFQUNwRyxDQUFDO1lBQ0csSUFBSSxDQUFDLGlDQUFpQyxHQUFHLDJFQUFvQyxDQUFDLHFEQUFxRCxDQUMvSCxJQUFJLEVBQ0osS0FBSyxDQUFDLHlCQUF5QixDQUFDLGFBQWEsRUFDN0MsS0FBSyxDQUFDLGtCQUFrQixFQUN4QixLQUFLLENBQUMsNkJBQTZCLEVBQ25DLEtBQUssQ0FBQyxPQUFPLEVBQ2IsS0FBSyxDQUFDLFVBQVUsQ0FDbkIsQ0FBQztZQUNGLElBQUksQ0FBQyxvQ0FBb0MsR0FBRywyRUFBb0MsQ0FBQyxxREFBcUQsQ0FDbEksSUFBSSxFQUNKLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxhQUFhLEVBQzdDLEtBQUssQ0FBQyxrQkFBa0IsRUFDeEIsS0FBSyxDQUFDLDZCQUE2QixFQUNuQyxLQUFLLENBQUMsT0FBTyxFQUNiLEtBQUssQ0FBQyxVQUFVLENBQ25CLENBQUM7WUFDRixJQUFJLENBQUMsc0RBQXNELEdBQUcsMkVBQW9DLENBQUMsNERBQTRELENBQzNKLElBQUksRUFDSixLQUFLLENBQUMseUJBQXlCLEVBQy9CLEtBQUssQ0FBQyxrQkFBa0IsRUFDeEIsS0FBSyxDQUFDLE9BQU8sRUFDYixLQUFLLENBQUMsZ0JBQWdCLEVBQ3RCLElBQUksQ0FBQyxvQ0FBb0MsRUFDekMsSUFBSSxDQUFDLGlDQUFpQyxFQUN0QyxLQUFLLENBQUMsVUFBVSxDQUNuQixDQUFDO1lBQ0YsSUFBSSxDQUFDLHlDQUF5QyxHQUFHLDJFQUFvQyxDQUFDLDJEQUEyRCxDQUM3SSxJQUFJLEVBQ0osS0FBSyxDQUFDLG9CQUFvQixFQUMxQixLQUFLLENBQUMsa0JBQWtCLEVBQ3hCLEtBQUssQ0FBQyw2QkFBNkIsRUFDbkMsS0FBSyxDQUFDLE9BQU8sRUFDYixLQUFLLENBQUMsVUFBVSxDQUNuQixDQUFDO1lBQ0YsSUFBSSxDQUFDLDZDQUE2QyxHQUFHLDJFQUFvQyxDQUFDLGlFQUFpRSxDQUN2SixJQUFJLEVBQ0osS0FBSyxDQUFDLG9CQUFvQixFQUMxQixLQUFLLENBQUMsa0JBQWtCLEVBQ3hCLEtBQUssQ0FBQyxPQUFPLEVBQ2IsS0FBSyxDQUFDLGdCQUFnQixFQUN0QixJQUFJLENBQUMseUNBQXlDLEVBQzlDLElBQUksQ0FBQyxpQ0FBaUMsRUFDdEMsS0FBSyxDQUFDLFVBQVUsQ0FDbkIsQ0FBQztZQUVGLElBQUksQ0FBQyxtQkFBbUIsR0FBRywyRUFBb0MsQ0FBQyxxQ0FBcUMsQ0FDakcsSUFBSSxFQUNKLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxhQUFhLEVBQzdDLEtBQUssQ0FBQyxrQkFBa0IsRUFDeEIsS0FBSyxDQUFDLE9BQU8sRUFDYixJQUFJLENBQUMsa0NBQWtDLEVBQ3ZDLElBQUksQ0FBQyxpQkFBaUIsRUFDdEIsSUFBSSxDQUFDLHNEQUFzRCxFQUMzRCxJQUFJLENBQUMsbUNBQW1DLEVBQ3hDLElBQUksQ0FBQyxZQUFZLEVBQ2pCLElBQUksQ0FBQyw2Q0FBNkMsRUFDbEQsS0FBSyxDQUFDLFVBQVUsQ0FDbkIsQ0FBQztRQUNOLENBQUM7YUFFRCxDQUFDO1lBQ0csSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksK0JBQWMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsSUFBSSxHQUFHLEtBQUssQ0FBQyxPQUFPLEdBQUcscUJBQXFCLEdBQUcsS0FBSyxDQUFDLFVBQVUsRUFBRTtnQkFDbEosa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGtCQUFrQixHQUFHLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLHdCQUF3QixHQUFHLEtBQUssQ0FBQyxVQUFVO2dCQUN6SSxTQUFTLEVBQUUsMEJBQVMsQ0FBQyxLQUFLLENBQ3RCLDBCQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFDaEYsMEJBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FDL0U7Z0JBQ0QsY0FBYyxFQUFFLEtBQUs7YUFDeEIsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztJQUNMLENBQUM7Q0FDSjtBQWxIRCx3RkFrSEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgQmFzZU9wZXJhdGlvblpvbmFsQWxhcm1zQW5kUnVsZXMgfSBmcm9tIFwiLi9CYXNlT3BlcmF0aW9uWm9uYWxBbGFybXNBbmRSdWxlc1wiO1xuaW1wb3J0IHsgU2VydmVyU2lkZU9wZXJhdGlvblpvbmFsQWxhcm1zQW5kUnVsZXNQcm9wcyB9IGZyb20gXCIuL3Byb3BzL1NlcnZlclNpZGVPcGVyYXRpb25ab25hbEFsYXJtc0FuZFJ1bGVzUHJvcHNcIjtcbmltcG9ydCB7IElBbGFybSwgQ2ZuSW5zaWdodFJ1bGUsIENvbXBvc2l0ZUFsYXJtLCBBbGFybVJ1bGUgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWNsb3Vkd2F0Y2hcIjtcbmltcG9ydCB7IEF2YWlsYWJpbGl0eUFuZExhdGVuY3lBbGFybXNBbmRSdWxlcyB9IGZyb20gXCIuL0F2YWlsYWJpbGl0eUFuZExhdGVuY3lBbGFybXNBbmRSdWxlc1wiO1xuaW1wb3J0IHsgSVNlcnZlclNpZGVPcGVyYXRpb25ab25hbEFsYXJtc0FuZFJ1bGVzIH0gZnJvbSBcIi4vSVNlcnZlclNpZGVPcGVyYXRpb25ab25hbEFsYXJtc0FuZFJ1bGVzXCI7XG5cbi8qKlxuICogVGhlIHNlcnZlciBzaWRlIGFsYXJtcyBhbmQgcnVsZXMgZm9yIGFuIG9wZXJhdGlvbiBpbiBhbiBBdmFpbGFiaWxpdHkgWm9uZVxuICovXG5leHBvcnQgY2xhc3MgU2VydmVyU2lkZU9wZXJhdGlvblpvbmFsQWxhcm1zQW5kUnVsZXMgZXh0ZW5kcyBCYXNlT3BlcmF0aW9uWm9uYWxBbGFybXNBbmRSdWxlcyBpbXBsZW1lbnRzIElTZXJ2ZXJTaWRlT3BlcmF0aW9uWm9uYWxBbGFybXNBbmRSdWxlc1xue1xuICAgIC8qKlxuICAgICAqIEFsYXJtIHRoYXQgdHJpZ2dlcnMgaWYgZWl0aGVyIGxhdGVuY3kgb3IgYXZhaWxhYmlsaXR5IGJyZWFjaCB0aGUgc3BlY2lmaWVkXG4gICAgICogdGhyZXNob2xkIGluIHRoaXMgQVogYW5kIHRoZSBBWiBpcyBhbiBvdXRsaWVyIGZvciBmYXVsdHMgb3IgbGF0ZW5jeVxuICAgICAqL1xuICAgIGlzb2xhdGVkSW1wYWN0QWxhcm06IElBbGFybTtcblxuICAgIC8qKlxuICAgICAqIEFsYXJtIGluZGljYXRpbmcgdGhhdCB0aGVyZSBhcmUgbXVsdGlwbGUgaW5zdGFuY2VzIHByb2R1Y2luZyBmYXVsdHMgaW4gXG4gICAgICogdGhpcyBBWiBpbmRpY2F0aW5nIHRoZSBmYXVsdCByYXRlIGlzIG5vdCBiZWluZyBjYXVzZWQgYnkgYSBzaW5nbGUgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBtdWx0aXBsZUluc3RhbmNlc1Byb2R1Y2luZ0ZhdWx0c0luVGhpc0F2YWlsYWJpbGl0eVpvbmU/OiBJQWxhcm07XG5cbiAgICAvKipcbiAgICAgKiBBbGFybSBpbmRpY2F0aW5nIHRoYXQgdGhlcmUgYXJlIG11bHRpcGxlIGluc3RhbmNlcyBwcm9kdWNpbmcgaGlnaFxuICAgICAqIGxhdGVuY3kgcmVzcG9uc2VzIGluIHRoaXMgQVogaW5kaWNhdGluZyB0aGUgbGF0ZW5jeSBpcyBub3QgYmVpbmcgXG4gICAgICogY2F1c2VkIGJ5IGEgc2luZ2xlIGluc3RhbmNlXG4gICAgICovXG4gICAgbXVsdGlwbGVJbnN0YW5jZXNQcm9kdWNpbmdIaWdoTGF0ZW5jeUluVGhpc0FaPzogSUFsYXJtO1xuXG4gICAgLyoqXG4gICAgICogSW5zaWdodCBydWxlIHRoYXQgbWVhc3VyZXMgdGhlIG51bWJlciBvZiBpbnN0YW5jZXMgY29udHJpYnV0aW5nIHRvIGhpZ2ggbGF0ZW5jeSBpbiB0aGlzIEFaXG4gICAgICovXG4gICAgaW5zdGFuY2VDb250cmlidXRvcnNUb0hpZ2hMYXRlbmN5SW5UaGlzQVo/OiBDZm5JbnNpZ2h0UnVsZTtcblxuICAgIC8qKlxuICAgICAqIEluc2lnaHQgcnVsZSB0aGF0IG1lYXN1cmVzIHRoZSBudW1iZXIgb2YgaW5zdGFuY2VzIGNvbnRyaWJ1dGluZyB0byBmYXVsdHMgaW4gdGhpcyBBWlxuICAgICAqL1xuICAgIGluc3RhbmNlQ29udHJpYnV0b3JzVG9GYXVsdHNJblRoaXNBWj86IENmbkluc2lnaHRSdWxlO1xuXG4gICAgLyoqXG4gICAgICogSW5zaWdodCBydWxlIHRoYXQgaXMgdXNlZCB0byBjYWxjdWxhdGUgdGhlIG51bWJlciBvZiBpbnN0YW5jZXMgaW4gdGhpcyBwYXJ0aWN1bGFyIEFaIHRoYXQgaXMgdXNlZCB3aXRoIG1ldHJpYyBtYXRoIHRvIGNhbGN1bGF0ZVxuICAgICAqIHRoZSBwZXJjZW50IG9mIGluc3RhbmNlcyBjb250cmlidXRpbmcgdG8gbGF0ZW5jeSBvciBmYXVsdHNcbiAgICAgKi9cbiAgICBpbnN0YW5jZXNIYW5kbGluZ1JlcXVlc3RzSW5UaGlzQVo/OiBDZm5JbnNpZ2h0UnVsZTtcblxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBTZXJ2ZXJTaWRlT3BlcmF0aW9uWm9uYWxBbGFybXNBbmRSdWxlc1Byb3BzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICAgICAgaWYgKHByb3BzLmNvbnRyaWJ1dG9ySW5zaWdodFJ1bGVEZXRhaWxzICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuY29udHJpYnV0b3JJbnNpZ2h0UnVsZURldGFpbHMgIT0gbnVsbClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXNIYW5kbGluZ1JlcXVlc3RzSW5UaGlzQVogPSBBdmFpbGFiaWxpdHlBbmRMYXRlbmN5QWxhcm1zQW5kUnVsZXMuY3JlYXRlU2VydmVyU2lkZUluc3RhbmNlc0hhbmRsaW5nUmVxdWVzdHNJblRoaXNBWlJ1bGUoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBwcm9wcy5hdmFpbGFiaWxpdHlNZXRyaWNEZXRhaWxzLm9wZXJhdGlvbk5hbWUsXG4gICAgICAgICAgICAgICAgcHJvcHMuYXZhaWxhYmlsaXR5Wm9uZUlkLFxuICAgICAgICAgICAgICAgIHByb3BzLmNvbnRyaWJ1dG9ySW5zaWdodFJ1bGVEZXRhaWxzLFxuICAgICAgICAgICAgICAgIHByb3BzLmNvdW50ZXIsXG4gICAgICAgICAgICAgICAgcHJvcHMubmFtZVN1ZmZpeFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VDb250cmlidXRvcnNUb0ZhdWx0c0luVGhpc0FaID0gQXZhaWxhYmlsaXR5QW5kTGF0ZW5jeUFsYXJtc0FuZFJ1bGVzLmNyZWF0ZVNlcnZlclNpZGVJbnN0YW5jZUZhdWx0Q29udHJpYnV0b3JzSW5UaGlzQVpSdWxlKFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgcHJvcHMuYXZhaWxhYmlsaXR5TWV0cmljRGV0YWlscy5vcGVyYXRpb25OYW1lLFxuICAgICAgICAgICAgICAgIHByb3BzLmF2YWlsYWJpbGl0eVpvbmVJZCxcbiAgICAgICAgICAgICAgICBwcm9wcy5jb250cmlidXRvckluc2lnaHRSdWxlRGV0YWlscywgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcHJvcHMuY291bnRlcixcbiAgICAgICAgICAgICAgICBwcm9wcy5uYW1lU3VmZml4LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMubXVsdGlwbGVJbnN0YW5jZXNQcm9kdWNpbmdGYXVsdHNJblRoaXNBdmFpbGFiaWxpdHlab25lID0gQXZhaWxhYmlsaXR5QW5kTGF0ZW5jeUFsYXJtc0FuZFJ1bGVzLmNyZWF0ZVNlcnZlclNpZGVab25hbE1vcmVUaGFuT25lSW5zdGFuY2VQcm9kdWNpbmdGYXVsdHNBbGFybShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIHByb3BzLmF2YWlsYWJpbGl0eU1ldHJpY0RldGFpbHMsXG4gICAgICAgICAgICAgICAgcHJvcHMuYXZhaWxhYmlsaXR5Wm9uZUlkLCAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcHJvcHMuY291bnRlcixcbiAgICAgICAgICAgICAgICBwcm9wcy5vdXRsaWVyVGhyZXNob2xkLFxuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VDb250cmlidXRvcnNUb0ZhdWx0c0luVGhpc0FaLFxuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzSGFuZGxpbmdSZXF1ZXN0c0luVGhpc0FaLFxuICAgICAgICAgICAgICAgIHByb3BzLm5hbWVTdWZmaXgsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZUNvbnRyaWJ1dG9yc1RvSGlnaExhdGVuY3lJblRoaXNBWiA9IEF2YWlsYWJpbGl0eUFuZExhdGVuY3lBbGFybXNBbmRSdWxlcy5jcmVhdGVTZXJ2ZXJTaWRlSW5zdGFuY2VIaWdoTGF0ZW5jeUNvbnRyaWJ1dG9yc0luVGhpc0FaUnVsZShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIHByb3BzLmxhdGVuY3lNZXRyaWNEZXRhaWxzLFxuICAgICAgICAgICAgICAgIHByb3BzLmF2YWlsYWJpbGl0eVpvbmVJZCxcbiAgICAgICAgICAgICAgICBwcm9wcy5jb250cmlidXRvckluc2lnaHRSdWxlRGV0YWlscywgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcHJvcHMuY291bnRlcixcbiAgICAgICAgICAgICAgICBwcm9wcy5uYW1lU3VmZml4XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5tdWx0aXBsZUluc3RhbmNlc1Byb2R1Y2luZ0hpZ2hMYXRlbmN5SW5UaGlzQVogPSBBdmFpbGFiaWxpdHlBbmRMYXRlbmN5QWxhcm1zQW5kUnVsZXMuY3JlYXRlU2VydmVyU2lkZVpvbmFsTW9yZVRoYW5PbmVJbnN0YW5jZVByb2R1Y2luZ0hpZ2hMYXRlbmN5QWxhcm0oXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBwcm9wcy5sYXRlbmN5TWV0cmljRGV0YWlscyxcbiAgICAgICAgICAgICAgICBwcm9wcy5hdmFpbGFiaWxpdHlab25lSWQsICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBwcm9wcy5jb3VudGVyLFxuICAgICAgICAgICAgICAgIHByb3BzLm91dGxpZXJUaHJlc2hvbGQsXG4gICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZUNvbnRyaWJ1dG9yc1RvSGlnaExhdGVuY3lJblRoaXNBWixcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlc0hhbmRsaW5nUmVxdWVzdHNJblRoaXNBWixcbiAgICAgICAgICAgICAgICBwcm9wcy5uYW1lU3VmZml4LFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5pc29sYXRlZEltcGFjdEFsYXJtID0gQXZhaWxhYmlsaXR5QW5kTGF0ZW5jeUFsYXJtc0FuZFJ1bGVzLmNyZWF0ZVNlcnZlclNpZGVJc29sYXRlZEFaSW1wYWN0QWxhcm0oXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBwcm9wcy5hdmFpbGFiaWxpdHlNZXRyaWNEZXRhaWxzLm9wZXJhdGlvbk5hbWUsXG4gICAgICAgICAgICAgICAgcHJvcHMuYXZhaWxhYmlsaXR5Wm9uZUlkLCAgICAgICAgIFxuICAgICAgICAgICAgICAgIHByb3BzLmNvdW50ZXIsXG4gICAgICAgICAgICAgICAgdGhpcy5hdmFpbGFiaWxpdHlab25lSXNPdXRsaWVyRm9yRmF1bHRzLFxuICAgICAgICAgICAgICAgIHRoaXMuYXZhaWxhYmlsaXR5QWxhcm0sXG4gICAgICAgICAgICAgICAgdGhpcy5tdWx0aXBsZUluc3RhbmNlc1Byb2R1Y2luZ0ZhdWx0c0luVGhpc0F2YWlsYWJpbGl0eVpvbmUsXG4gICAgICAgICAgICAgICAgdGhpcy5hdmFpbGFiaWxpdHlab25lSXNPdXRsaWVyRm9yTGF0ZW5jeSxcbiAgICAgICAgICAgICAgICB0aGlzLmxhdGVuY3lBbGFybSxcbiAgICAgICAgICAgICAgICB0aGlzLm11bHRpcGxlSW5zdGFuY2VzUHJvZHVjaW5nSGlnaExhdGVuY3lJblRoaXNBWixcbiAgICAgICAgICAgICAgICBwcm9wcy5uYW1lU3VmZml4LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuaXNvbGF0ZWRJbXBhY3RBbGFybSA9IG5ldyBDb21wb3NpdGVBbGFybShzY29wZSwgcHJvcHMub3BlcmF0aW9uLm9wZXJhdGlvbk5hbWUgKyBcIkFaXCIgKyBwcm9wcy5jb3VudGVyICsgXCJJc29sYXRlZEltcGFjdEFsYXJtXCIgKyBwcm9wcy5uYW1lU3VmZml4LCB7XG4gICAgICAgICAgICAgICAgY29tcG9zaXRlQWxhcm1OYW1lOiBwcm9wcy5hdmFpbGFiaWxpdHlab25lSWQgKyBgLSR7cHJvcHMub3BlcmF0aW9uLm9wZXJhdGlvbk5hbWUudG9Mb3dlckNhc2UoKX0taXNvbGF0ZWQtaW1wYWN0LWFsYXJtYCArIHByb3BzLm5hbWVTdWZmaXgsXG4gICAgICAgICAgICAgICAgYWxhcm1SdWxlOiBBbGFybVJ1bGUuYW55T2YoXG4gICAgICAgICAgICAgICAgICAgIEFsYXJtUnVsZS5hbGxPZih0aGlzLmF2YWlsYWJpbGl0eVpvbmVJc091dGxpZXJGb3JGYXVsdHMsIHRoaXMuYXZhaWxhYmlsaXR5QWxhcm0pLCBcbiAgICAgICAgICAgICAgICAgICAgQWxhcm1SdWxlLmFsbE9mKHRoaXMuYXZhaWxhYmlsaXR5Wm9uZUlzT3V0bGllckZvckxhdGVuY3ksIHRoaXMubGF0ZW5jeUFsYXJtKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgYWN0aW9uc0VuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSAgXG4gICAgfVxufSJdfQ==