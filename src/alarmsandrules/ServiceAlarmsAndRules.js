"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceAlarmsAndRules = void 0;
const constructs_1 = require("constructs");
//import { AlarmRule, CompositeAlarm, IAlarm } from "aws-cdk-lib/aws-cloudwatch";
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
//import { Alarm, AlarmRule, ComparisonOperator, CompositeAlarm, IAlarm, IMetric, MathExpression } from "aws-cdk-lib/aws-cloudwatch";
const AvailabilityAndLatencyMetrics_1 = require("../metrics/AvailabilityAndLatencyMetrics");
const AvailabilityMetricType_1 = require("../utilities/AvailabilityMetricType");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const AvailabilityZoneMapper_1 = require("../utilities/AvailabilityZoneMapper");
/**
 * Service level alarms and rules using critical operations
 */
class ServiceAlarmsAndRules extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.service = props.service;
        let criticalOperations = props.service.operations.filter(x => x.isCritical == true).map(x => x.operationName);
        let counter = 1;
        this.zonalAggregateIsolatedImpactAlarms = [];
        let azMapper = new AvailabilityZoneMapper_1.AvailabilityZoneMapper(this, "AZMapper", {
            availabilityZoneNames: props.service.availabilityZoneNames
        });
        for (let i = 0; i < props.service.availabilityZoneNames.length; i++) {
            let availabilityZonedId = azMapper.availabilityZoneId(props.service.availabilityZoneNames[i]);
            this.zonalAggregateIsolatedImpactAlarms.push(new aws_cloudwatch_1.CompositeAlarm(this, "AZ" + counter + "ServiceAggregateIsolatedImpactAlarm", {
                compositeAlarmName: availabilityZonedId + "-" + props.service.serviceName.toLowerCase() + "-isolated-impact-aggregate-alarm",
                alarmRule: aws_cloudwatch_1.AlarmRule.anyOf(...Object.values(Object.entries(props.perOperationAlarmsAndRules)
                    .reduce((filtered, [key, value]) => {
                    if (criticalOperations.indexOf(key) > -1) {
                        filtered[key] = value;
                    }
                    return filtered;
                }, {}))
                    .map(x => x.aggregateZonalAlarms[i]))
            }));
            counter++;
        }
        this.regionalAvailabilityServerSideAlarm = new aws_cloudwatch_1.CompositeAlarm(this, "tesT", {
            alarmRule: aws_cloudwatch_1.AlarmRule.fromString("ALARM(TEST)")
        });
        let keyPrefix = "";
        let regionalOperationFaultCountMetrics = {};
        props.service.operations.filter(x => x.isCritical == true).forEach(x => {
            keyPrefix = AvailabilityAndLatencyMetrics_1.AvailabilityAndLatencyMetrics.nextChar(keyPrefix);
            regionalOperationFaultCountMetrics[keyPrefix] = AvailabilityAndLatencyMetrics_1.AvailabilityAndLatencyMetrics.createRegionalAvailabilityMetric({
                label: x.operationName + " fault count",
                metricDetails: x.serverSideAvailabilityMetricDetails,
                metricType: AvailabilityMetricType_1.AvailabilityMetricType.FAULT_COUNT
            });
        });
        let regionalFaultCount = new aws_cloudwatch_1.MathExpression({
            usingMetrics: regionalOperationFaultCountMetrics,
            expression: Object.keys(regionalOperationFaultCountMetrics).join("+"),
            label: props.service.serviceName + " fault count",
            period: props.service.period
        });
        this.regionalFaultCountServerSideAlarm = new aws_cloudwatch_1.Alarm(this, "RegionalFaultCount", {
            alarmName: aws_cdk_lib_1.Fn.ref("AWS::Region") + "-" + props.service.serviceName.toLowerCase() + "-fault-count",
            datapointsToAlarm: 3,
            evaluationPeriods: 5,
            comparisonOperator: aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            threshold: props.service.faultCountThreshold,
            alarmDescription: "Counts faults from all critical operation in the service",
            metric: regionalFaultCount
        });
        let canaryAlarms = Object.values(Object.entries(props.perOperationAlarmsAndRules)
            .reduce((filtered, [key, value]) => {
            if (criticalOperations.indexOf(key) > -1) {
                filtered[key] = value;
            }
            return filtered;
        }, {})).reduce((filtered, value) => {
            if (value.canaryRegionalAlarmsAndRules !== undefined) {
                filtered.push(value.canaryRegionalAlarmsAndRules);
            }
            return filtered;
        }, [])
            .map(x => x.availabilityOrLatencyAlarm);
        if (canaryAlarms !== undefined && canaryAlarms !== null && canaryAlarms.length > 0) {
            this.regionalAvailabilityCanaryAlarm = new aws_cloudwatch_1.CompositeAlarm(this, "ServiceCanaryAggregateIsolatedImpactAlarm", {
                compositeAlarmName: aws_cdk_lib_1.Fn.ref("AWS::Region") + "-" + props.service.serviceName.toLowerCase() + "-canary-aggregate-alarm",
                alarmRule: aws_cloudwatch_1.AlarmRule.anyOf(...canaryAlarms)
            });
        }
        this.regionalAvailabilityServerSideAlarm = new aws_cloudwatch_1.CompositeAlarm(this, "ServiceServerSideAggregateIsolatedImpactAlarm", {
            compositeAlarmName: aws_cdk_lib_1.Fn.ref("AWS::Region") + "-" + props.service.serviceName.toLowerCase() + "-server-side-aggregate-alarm",
            alarmRule: aws_cloudwatch_1.AlarmRule.anyOf(...Object.values(Object.entries(props.perOperationAlarmsAndRules)
                .reduce((filtered, [key, value]) => {
                if (criticalOperations.indexOf(key) > -1) {
                    filtered[key] = value;
                }
                return filtered;
            }, {}))
                .map(x => x.serverSideRegionalAlarmsAndRules)
                .map(x => x.availabilityOrLatencyAlarm))
        });
    }
}
exports.ServiceAlarmsAndRules = ServiceAlarmsAndRules;
//# sourceMappingURL=data:application/json;base64,