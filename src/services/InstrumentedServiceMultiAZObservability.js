"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstrumentedServiceMultiAZObservability = void 0;
const constructs_1 = require("constructs");
const OperationAlarmsAndRules_1 = require("../alarmsandrules/OperationAlarmsAndRules");
const ServiceAlarmsAndRules_1 = require("../alarmsandrules/ServiceAlarmsAndRules");
const MultiAvailabilityZoneObservability_1 = require("../MultiAvailabilityZoneObservability");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const OperationAvailabilityAndLatencyDashboard_1 = require("../dashboards/OperationAvailabilityAndLatencyDashboard");
const ServiceAvailabilityAndLatencyDashboard_1 = require("../dashboards/ServiceAvailabilityAndLatencyDashboard");
const CanaryFunction_1 = require("../canaries/CanaryFunction");
const CanaryTest_1 = require("../canaries/CanaryTest");
const aws_cdk_lib_1 = require("aws-cdk-lib");
class InstrumentedServiceMultiAZObservability extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.operationDashboards = [];
        if (props.service.operations.filter(x => x.canaryTestProps !== undefined).length > 0) {
            let canary = new CanaryFunction_1.CanaryFunction(new aws_cdk_lib_1.NestedStack(this, "CanaryStack"), "CanaryFunction", {});
            props.service.operations.forEach((operation, index) => {
                if (operation.canaryTestProps !== undefined) {
                    let nestedStack = new aws_cdk_lib_1.NestedStack(this, operation.operationName + "CanaryTestStack");
                    let test = new CanaryTest_1.CanaryTest(nestedStack, operation.operationName + "CanaryTest", {
                        function: canary.function,
                        requestCount: operation.canaryTestProps.requestCount,
                        schedule: operation.canaryTestProps.schedule,
                        operation: operation,
                        loadBalancer: operation.canaryTestProps?.loadBalancer,
                        headers: operation.canaryTestProps.headers,
                        postData: operation.canaryTestProps.postData
                    });
                    let newOperation = new MultiAvailabilityZoneObservability_1.Operation({
                        serverSideAvailabilityMetricDetails: operation.serverSideAvailabilityMetricDetails,
                        serverSideLatencyMetricDetails: operation.serverSideLatencyMetricDetails,
                        serverSideContributorInsightRuleDetails: operation.serverSideContributorInsightRuleDetails,
                        service: operation.service,
                        operationName: operation.operationName,
                        path: operation.path,
                        isCritical: operation.isCritical,
                        httpMethods: operation.httpMethods,
                        canaryMetricDetails: new MultiAvailabilityZoneObservability_1.CanaryMetrics({
                            canaryAvailabilityMetricDetails: new MultiAvailabilityZoneObservability_1.OperationMetricDetails({
                                operationName: operation.operationName,
                                metricNamespace: test.metricNamespace,
                                successMetricNames: ["Success"],
                                faultMetricNames: ["Fault", "Error"],
                                alarmStatistic: operation.serverSideAvailabilityMetricDetails.alarmStatistic,
                                unit: aws_cloudwatch_1.Unit.COUNT,
                                period: operation.serverSideAvailabilityMetricDetails.period,
                                evaluationPeriods: operation.serverSideAvailabilityMetricDetails.evaluationPeriods,
                                datapointsToAlarm: operation.serverSideAvailabilityMetricDetails.datapointsToAlarm,
                                successAlarmThreshold: operation.serverSideAvailabilityMetricDetails.successAlarmThreshold,
                                faultAlarmThreshold: operation.serverSideAvailabilityMetricDetails.faultAlarmThreshold,
                                graphedFaultStatistics: ["Sum"],
                                graphedSuccessStatistics: ["Sum"],
                                metricDimensions: {
                                    zonalDimensions(availabilityZoneId, region) {
                                        return {
                                            "AZ-ID": availabilityZoneId,
                                            "Region": region,
                                            "Operation": operation.operationName
                                        };
                                    },
                                    regionalDimensions(region) {
                                        return {
                                            "Region": region,
                                            "Operation": operation.operationName
                                        };
                                    }
                                }
                            }),
                            canaryLatencyMetricDetails: new MultiAvailabilityZoneObservability_1.OperationMetricDetails({
                                operationName: operation.operationName,
                                metricNamespace: test.metricNamespace,
                                successMetricNames: ["SuccessLatency"],
                                faultMetricNames: ["FaultLatency"],
                                alarmStatistic: operation.serverSideLatencyMetricDetails.alarmStatistic,
                                unit: aws_cloudwatch_1.Unit.MILLISECONDS,
                                period: operation.serverSideLatencyMetricDetails.period,
                                evaluationPeriods: operation.serverSideLatencyMetricDetails.evaluationPeriods,
                                datapointsToAlarm: operation.serverSideLatencyMetricDetails.datapointsToAlarm,
                                successAlarmThreshold: operation.serverSideLatencyMetricDetails.successAlarmThreshold,
                                faultAlarmThreshold: operation.serverSideLatencyMetricDetails.faultAlarmThreshold,
                                graphedFaultStatistics: operation.serverSideLatencyMetricDetails.graphedFaultStatistics,
                                graphedSuccessStatistics: operation.serverSideLatencyMetricDetails.graphedSuccessStatistics,
                                metricDimensions: {
                                    zonalDimensions(availabilityZoneId, region) {
                                        return {
                                            "AZ-ID": availabilityZoneId,
                                            "Region": region,
                                            "Operation": operation.operationName
                                        };
                                    },
                                    regionalDimensions(region) {
                                        return {
                                            "Region": region,
                                            "Operation": operation.operationName
                                        };
                                    }
                                }
                            }),
                            canaryContributorInsightRuleDetails: {
                                logGroups: [canary.logGroup],
                                successLatencyMetricJsonPath: "$.SuccessLatency",
                                faultMetricJsonPath: "$.Faults",
                                operationNameJsonPath: "$.Operation",
                                instanceIdJsonPath: "$.InstanceId",
                                availabilityZoneIdJsonPath: "$.AZ-ID"
                            }
                        })
                    });
                    props.service.operations[index] = newOperation;
                }
            });
        }
        this.perOperationAlarmsAndRules = Object.fromEntries(props.service.operations.map((operation) => [
            operation.operationName,
            new OperationAlarmsAndRules_1.OperationAlarmsAndRules(new aws_cdk_lib_1.NestedStack(this, operation.operationName + "DashboardStack"), operation.operationName + "OperationAlarmsAndRulesNestedStack", {
                operation: operation,
                outlierDetectionAlgorithm: MultiAvailabilityZoneObservability_1.OutlierDetectionAlgorithm.STATIC,
                outlierThreshold: props.outlierThreshold,
                loadBalancer: props.loadBalancer
            })
        ]));
        let serviceAlarmsStack = new aws_cdk_lib_1.NestedStack(this, "ServiceAlarmsStack");
        this.serviceAlarms = new ServiceAlarmsAndRules_1.ServiceAlarmsAndRules(serviceAlarmsStack, "ServiceAlarmsNestedStack", {
            perOperationAlarmsAndRules: this.perOperationAlarmsAndRules,
            service: props.service
        });
        if (props.createDashboards) {
            props.service.operations.forEach(x => {
                let dashboardStack = new aws_cdk_lib_1.NestedStack(this, x.operationName + "Dashboard");
                this.operationDashboards.push(new OperationAvailabilityAndLatencyDashboard_1.OperationAvailabilityAndLatencyDashboard(dashboardStack, x.operationName + "Dashboard", {
                    operation: x,
                    interval: props.interval ? props.interval : aws_cdk_lib_1.Duration.minutes(60),
                    loadBalancer: props.loadBalancer,
                    regionalEndpointCanaryAvailabilityAlarm: this.perOperationAlarmsAndRules[x.operationName].canaryRegionalAlarmsAndRules?.availabilityAlarm,
                    regionalEndpointCanaryLatencyAlarm: this.perOperationAlarmsAndRules[x.operationName].canaryRegionalAlarmsAndRules?.latencyAlarm,
                    regionalEndpointServerAvailabilityAlarm: this.perOperationAlarmsAndRules[x.operationName].serverSideRegionalAlarmsAndRules.availabilityAlarm,
                    regionalEndpointServerLatencyAlarm: this.perOperationAlarmsAndRules[x.operationName].serverSideRegionalAlarmsAndRules.latencyAlarm,
                    zonalEndpointCanaryAvailabilityAlarms: this.perOperationAlarmsAndRules[x.operationName].canaryZonalAlarmsAndRules.map(x => x.availabilityAlarm),
                    zonalEndpointCanaryLatencyAlarms: this.perOperationAlarmsAndRules[x.operationName].canaryZonalAlarmsAndRules.map(x => x.latencyAlarm),
                    zonalEndpointServerAvailabilityAlarms: this.perOperationAlarmsAndRules[x.operationName].serverSideZonalAlarmsAndRules.map(x => x.availabilityAlarm),
                    zonalEndpointServerLatencyAlarms: this.perOperationAlarmsAndRules[x.operationName].serverSideZonalAlarmsAndRules.map(x => x.latencyAlarm),
                    isolatedAZImpactAlarms: this.perOperationAlarmsAndRules[x.operationName].aggregateZonalAlarms,
                    regionalImpactAlarm: this.perOperationAlarmsAndRules[x.operationName].aggregateRegionalAlarm,
                    instanceContributorsToFaults: this.perOperationAlarmsAndRules[x.operationName].serverSideRegionalAlarmsAndRules.instanceContributorsToRegionalFaults,
                    instanceContributorsToHighLatency: this.perOperationAlarmsAndRules[x.operationName].serverSideRegionalAlarmsAndRules.instanceContributorsToRegionalHighLatency,
                }).dashboard);
            });
            let dashboardStack = new aws_cdk_lib_1.NestedStack(this, "ServiceDashboardStack");
            this.serviceDashboard = new ServiceAvailabilityAndLatencyDashboard_1.ServiceAvailabilityAndLatencyDashboard(dashboardStack, props.service.serviceName + "Dashboard", {
                interval: props.interval ? props.interval : aws_cdk_lib_1.Duration.minutes(60),
                service: props.service,
                aggregateRegionalAlarm: this.serviceAlarms.regionalFaultCountServerSideAlarm,
                zonalAggregateAlarms: this.serviceAlarms.zonalAggregateIsolatedImpactAlarms
            }).dashboard;
        }
    }
}
exports.InstrumentedServiceMultiAZObservability = InstrumentedServiceMultiAZObservability;
//# sourceMappingURL=data:application/json;base64,