"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiAvailabilityZoneObservability = exports.ContributorInsightRuleDetails = exports.CanaryMetrics = exports.AvailabilityZoneMapper = exports.OperationMetricDetails = exports.Operation = exports.Service = exports.OutlierDetectionAlgorithm = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constructs_1 = require("constructs");
const BasicServiceMultiAZObservability_1 = require("./services/BasicServiceMultiAZObservability");
const InstrumentedServiceMultiAZObservability_1 = require("./services/InstrumentedServiceMultiAZObservability");
var OutlierDetectionAlgorithm_1 = require("./utilities/OutlierDetectionAlgorithm");
Object.defineProperty(exports, "OutlierDetectionAlgorithm", { enumerable: true, get: function () { return OutlierDetectionAlgorithm_1.OutlierDetectionAlgorithm; } });
var Service_1 = require("./services/Service");
Object.defineProperty(exports, "Service", { enumerable: true, get: function () { return Service_1.Service; } });
var Operation_1 = require("./services/Operation");
Object.defineProperty(exports, "Operation", { enumerable: true, get: function () { return Operation_1.Operation; } });
var OperationMetricDetails_1 = require("./services/OperationMetricDetails");
Object.defineProperty(exports, "OperationMetricDetails", { enumerable: true, get: function () { return OperationMetricDetails_1.OperationMetricDetails; } });
var AvailabilityZoneMapper_1 = require("./utilities/AvailabilityZoneMapper");
Object.defineProperty(exports, "AvailabilityZoneMapper", { enumerable: true, get: function () { return AvailabilityZoneMapper_1.AvailabilityZoneMapper; } });
var CanaryMetrics_1 = require("./services/CanaryMetrics");
Object.defineProperty(exports, "CanaryMetrics", { enumerable: true, get: function () { return CanaryMetrics_1.CanaryMetrics; } });
var ContributorInsightRuleDetails_1 = require("./services/ContributorInsightRuleDetails");
Object.defineProperty(exports, "ContributorInsightRuleDetails", { enumerable: true, get: function () { return ContributorInsightRuleDetails_1.ContributorInsightRuleDetails; } });
/**
 * The construct will create multi-AZ observability for your service based on the
 * parameters you provide. It will create alarms that indicate if a single AZ is
 * impacted so you can take appropriate action to mitigate the event, for example,
 * using zonal shift. It will also optionally create dashboards for your service so
 * you can visualize the metrics used to feed the alarms as well as the alarm states.
 */
class MultiAvailabilityZoneObservability extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        if (props !== undefined) {
            if (props.basicServiceObservabilityProps !== undefined && props.basicServiceObservabilityProps != null) {
                new BasicServiceMultiAZObservability_1.BasicServiceMultiAZObservability(this, "BasicServiceObservability", props.basicServiceObservabilityProps);
            }
            else if (props.instrumentedServiceObservabilityProps !== undefined && props.instrumentedServiceObservabilityProps != null) {
                new InstrumentedServiceMultiAZObservability_1.InstrumentedServiceMultiAZObservability(this, "FullyInstrumentedServiceObservability", {
                    service: props.instrumentedServiceObservabilityProps.service,
                    outlierThreshold: props.instrumentedServiceObservabilityProps.outlierThreshold,
                    loadBalancer: props.instrumentedServiceObservabilityProps.loadBalancer,
                    createDashboards: props.instrumentedServiceObservabilityProps.createDashboards,
                    interval: props.instrumentedServiceObservabilityProps.interval
                });
            }
        }
    }
}
exports.MultiAvailabilityZoneObservability = MultiAvailabilityZoneObservability;
_a = JSII_RTTI_SYMBOL_1;
MultiAvailabilityZoneObservability[_a] = { fqn: "multi-az-observability.MultiAvailabilityZoneObservability", version: "0.1.12" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTXVsdGlBdmFpbGFiaWxpdHlab25lT2JzZXJ2YWJpbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIk11bHRpQXZhaWxhYmlsaXR5Wm9uZU9ic2VydmFiaWxpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FBdUM7QUFFdkMsa0dBQStGO0FBQy9GLGdIQUE2RztBQUk3RyxtRkFBa0Y7QUFBekUsc0lBQUEseUJBQXlCLE9BQUE7QUFJbEMsOENBQTZDO0FBQXBDLGtHQUFBLE9BQU8sT0FBQTtBQUdoQixrREFBaUQ7QUFBeEMsc0dBQUEsU0FBUyxPQUFBO0FBQ2xCLDRFQUEyRTtBQUFsRSxnSUFBQSxzQkFBc0IsT0FBQTtBQUsvQiw2RUFBNEU7QUFBbkUsZ0lBQUEsc0JBQXNCLE9BQUE7QUFHL0IsMERBQXlEO0FBQWhELDhHQUFBLGFBQWEsT0FBQTtBQUt0QiwwRkFBeUY7QUFBaEYsOElBQUEsNkJBQTZCLE9BQUE7QUFHdEM7Ozs7OztHQU1HO0FBQ0gsTUFBYSxrQ0FBbUMsU0FBUSxzQkFBUztJQUU3RCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQStDO1FBRXJGLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUN2QixDQUFDO1lBQ0csSUFBSSxLQUFLLENBQUMsOEJBQThCLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyw4QkFBOEIsSUFBSSxJQUFJLEVBQ3RHLENBQUM7Z0JBQ0csSUFBSSxtRUFBZ0MsQ0FBQyxJQUFJLEVBQUUsMkJBQTJCLEVBQUUsS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7WUFDbEgsQ0FBQztpQkFDSSxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLHFDQUFxQyxJQUFJLElBQUksRUFDekgsQ0FBQztnQkFDRyxJQUFJLGlGQUF1QyxDQUFDLElBQUksRUFBRSx1Q0FBdUMsRUFBRTtvQkFDdkYsT0FBTyxFQUFFLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxPQUFPO29CQUM1RCxnQkFBZ0IsRUFBRSxLQUFLLENBQUMscUNBQXFDLENBQUMsZ0JBQWdCO29CQUM5RSxZQUFZLEVBQUUsS0FBSyxDQUFDLHFDQUFxQyxDQUFDLFlBQVk7b0JBQ3RFLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxnQkFBZ0I7b0JBQzlFLFFBQVEsRUFBRSxLQUFLLENBQUMscUNBQXFDLENBQUMsUUFBUTtpQkFDakUsQ0FBQyxDQUFDO1lBQ1AsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDOztBQXZCTCxnRkF3QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgSU11bHRpQXZhaWxhYmlsaXR5Wm9uZU9ic2VydmFiaWxpdHkgfSBmcm9tIFwiLi9JTXVsdGlBdmFpbGFiaWxpeVpvbmVPYnNlcnZhYmlsaXR5XCI7XG5pbXBvcnQgeyBCYXNpY1NlcnZpY2VNdWx0aUFaT2JzZXJ2YWJpbGl0eSB9IGZyb20gXCIuL3NlcnZpY2VzL0Jhc2ljU2VydmljZU11bHRpQVpPYnNlcnZhYmlsaXR5XCI7XG5pbXBvcnQgeyBJbnN0cnVtZW50ZWRTZXJ2aWNlTXVsdGlBWk9ic2VydmFiaWxpdHkgfSBmcm9tIFwiLi9zZXJ2aWNlcy9JbnN0cnVtZW50ZWRTZXJ2aWNlTXVsdGlBWk9ic2VydmFiaWxpdHlcIjtcbmltcG9ydCB7IE11bHRpQXZhaWxhYmlsaXR5Wm9uZU9ic2VydmFiaWxpdHlQcm9wcyB9IGZyb20gXCIuL011bHRpQXZhaWxhYmlsaXR5Wm9uZU9ic2VydmFiaWxpdHlQcm9wc1wiO1xuZXhwb3J0IHsgTXVsdGlBdmFpbGFiaWxpdHlab25lT2JzZXJ2YWJpbGl0eVByb3BzIH0gZnJvbSBcIi4vTXVsdGlBdmFpbGFiaWxpdHlab25lT2JzZXJ2YWJpbGl0eVByb3BzXCI7XG5leHBvcnQgeyBJTXVsdGlBdmFpbGFiaWxpdHlab25lT2JzZXJ2YWJpbGl0eSB9IGZyb20gXCIuL0lNdWx0aUF2YWlsYWJpbGl5Wm9uZU9ic2VydmFiaWxpdHlcIjtcbmV4cG9ydCB7IE91dGxpZXJEZXRlY3Rpb25BbGdvcml0aG0gfSBmcm9tIFwiLi91dGlsaXRpZXMvT3V0bGllckRldGVjdGlvbkFsZ29yaXRobVwiO1xuZXhwb3J0IHsgQmFzaWNTZXJ2aWNlTXVsdGlBWk9ic2VydmFiaWxpdHlQcm9wcyB9IGZyb20gXCIuL3NlcnZpY2VzL3Byb3BzL0Jhc2ljU2VydmljZU11bHRpQVpPYnNlcnZhYmlsaXR5UHJvcHNcIjtcbmV4cG9ydCB7IEluc3RydW1lbnRlZFNlcnZpY2VNdWx0aUFaT2JzZXJ2YWJpbGl0eVByb3BzIH0gZnJvbSBcIi4vc2VydmljZXMvcHJvcHMvSW5zdHJ1bWVudGVkU2VydmljZU11bHRpQVpPYnNlcnZhYmlsaXR5UHJvcHNcIjtcbmV4cG9ydCB7IElTZXJ2aWNlIH0gZnJvbSBcIi4vc2VydmljZXMvSVNlcnZpY2VcIjtcbmV4cG9ydCB7IFNlcnZpY2UgfSBmcm9tIFwiLi9zZXJ2aWNlcy9TZXJ2aWNlXCI7XG5leHBvcnQgeyBJQXZhaWxhYmlsaXR5Wm9uZU1hcHBlciB9IGZyb20gXCIuL3V0aWxpdGllcy9JQXZhaWxhYmlsaXR5Wm9uZU1hcHBlclwiO1xuZXhwb3J0IHsgSU9wZXJhdGlvbiB9IGZyb20gXCIuL3NlcnZpY2VzL0lPcGVyYXRpb25cIjtcbmV4cG9ydCB7IE9wZXJhdGlvbiB9IGZyb20gXCIuL3NlcnZpY2VzL09wZXJhdGlvblwiO1xuZXhwb3J0IHsgT3BlcmF0aW9uTWV0cmljRGV0YWlscyB9IGZyb20gXCIuL3NlcnZpY2VzL09wZXJhdGlvbk1ldHJpY0RldGFpbHNcIjtcbmV4cG9ydCB7IElPcGVyYXRpb25NZXRyaWNEZXRhaWxzIH0gZnJvbSBcIi4vc2VydmljZXMvSU9wZXJhdGlvbk1ldHJpY0RldGFpbHNcIjtcbmV4cG9ydCB7IEFkZENhbmFyeVRlc3RQcm9wcyB9IGZyb20gXCIuL2NhbmFyaWVzL3Byb3BzL0FkZENhbmFyeVRlc3RQcm9wc1wiO1xuZXhwb3J0IHsgSUNhbmFyeU1ldHJpY3MgfSBmcm9tIFwiLi9zZXJ2aWNlcy9JQ2FuYXJ5TWV0cmljc1wiO1xuZXhwb3J0IHsgSUNvbnRyaWJ1dG9ySW5zaWdodFJ1bGVEZXRhaWxzIH0gZnJvbSBcIi4vc2VydmljZXMvSUNvbnRyaWJ1dG9ySW5zaWdodFJ1bGVEZXRhaWxzXCI7XG5leHBvcnQgeyBBdmFpbGFiaWxpdHlab25lTWFwcGVyIH0gZnJvbSBcIi4vdXRpbGl0aWVzL0F2YWlsYWJpbGl0eVpvbmVNYXBwZXJcIjtcbmV4cG9ydCB7IEF2YWlsYWJpbGl0eVpvbmVNYXBwZXJQcm9wcyB9IGZyb20gXCIuL3V0aWxpdGllcy9BdmFpbGFiaWxpdHlab25lTWFwcGVyUHJvcHNcIjtcbmV4cG9ydCB7IFNlcnZpY2VQcm9wcyB9IGZyb20gXCIuL3NlcnZpY2VzL3Byb3BzL1NlcnZpY2VQcm9wc1wiO1xuZXhwb3J0IHsgQ2FuYXJ5TWV0cmljcyB9IGZyb20gXCIuL3NlcnZpY2VzL0NhbmFyeU1ldHJpY3NcIjtcbmV4cG9ydCB7IENhbmFyeU1ldHJpY1Byb3BzIH0gZnJvbSBcIi4vc2VydmljZXMvcHJvcHMvQ2FuYXJ5TWV0cmljUHJvcHNcIjtcbmV4cG9ydCB7IE9wZXJhdGlvblByb3BzIH0gZnJvbSBcIi4vc2VydmljZXMvcHJvcHMvT3BlcmF0aW9uUHJvcHNcIjtcbmV4cG9ydCB7IE9wZXJhdGlvbk1ldHJpY0RldGFpbHNQcm9wcyB9IGZyb20gXCIuL3NlcnZpY2VzL3Byb3BzL09wZXJhdGlvbk1ldHJpY0RldGFpbHNQcm9wc1wiO1xuZXhwb3J0IHsgSU1ldHJpY0RpbWVuc2lvbnMgfSBmcm9tIFwiLi9zZXJ2aWNlcy9JTWV0cmljRGltZW5zaW9uc1wiO1xuZXhwb3J0IHsgQ29udHJpYnV0b3JJbnNpZ2h0UnVsZURldGFpbHMgfSBmcm9tIFwiLi9zZXJ2aWNlcy9Db250cmlidXRvckluc2lnaHRSdWxlRGV0YWlsc1wiO1xuZXhwb3J0IHsgQ29udHJpYnV0b3JJbnNpZ2h0UnVsZURldGFpbHNQcm9wcyB9IGZyb20gXCIuL3NlcnZpY2VzL3Byb3BzL0NvbnRyaWJ1dG9ySW5zaWdodFJ1bGVEZXRhaWxzUHJvcHNcIjtcblxuLyoqXG4gKiBUaGUgY29uc3RydWN0IHdpbGwgY3JlYXRlIG11bHRpLUFaIG9ic2VydmFiaWxpdHkgZm9yIHlvdXIgc2VydmljZSBiYXNlZCBvbiB0aGUgXG4gKiBwYXJhbWV0ZXJzIHlvdSBwcm92aWRlLiBJdCB3aWxsIGNyZWF0ZSBhbGFybXMgdGhhdCBpbmRpY2F0ZSBpZiBhIHNpbmdsZSBBWiBpc1xuICogaW1wYWN0ZWQgc28geW91IGNhbiB0YWtlIGFwcHJvcHJpYXRlIGFjdGlvbiB0byBtaXRpZ2F0ZSB0aGUgZXZlbnQsIGZvciBleGFtcGxlLFxuICogdXNpbmcgem9uYWwgc2hpZnQuIEl0IHdpbGwgYWxzbyBvcHRpb25hbGx5IGNyZWF0ZSBkYXNoYm9hcmRzIGZvciB5b3VyIHNlcnZpY2Ugc29cbiAqIHlvdSBjYW4gdmlzdWFsaXplIHRoZSBtZXRyaWNzIHVzZWQgdG8gZmVlZCB0aGUgYWxhcm1zIGFzIHdlbGwgYXMgdGhlIGFsYXJtIHN0YXRlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIE11bHRpQXZhaWxhYmlsaXR5Wm9uZU9ic2VydmFiaWxpdHkgZXh0ZW5kcyBDb25zdHJ1Y3QgaW1wbGVtZW50cyBJTXVsdGlBdmFpbGFiaWxpdHlab25lT2JzZXJ2YWJpbGl0eVxue1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogTXVsdGlBdmFpbGFiaWxpdHlab25lT2JzZXJ2YWJpbGl0eVByb3BzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBpZiAocHJvcHMgIT09IHVuZGVmaW5lZClcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHByb3BzLmJhc2ljU2VydmljZU9ic2VydmFiaWxpdHlQcm9wcyAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmJhc2ljU2VydmljZU9ic2VydmFiaWxpdHlQcm9wcyAhPSBudWxsKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5ldyBCYXNpY1NlcnZpY2VNdWx0aUFaT2JzZXJ2YWJpbGl0eSh0aGlzLCBcIkJhc2ljU2VydmljZU9ic2VydmFiaWxpdHlcIiwgcHJvcHMuYmFzaWNTZXJ2aWNlT2JzZXJ2YWJpbGl0eVByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHByb3BzLmluc3RydW1lbnRlZFNlcnZpY2VPYnNlcnZhYmlsaXR5UHJvcHMgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5pbnN0cnVtZW50ZWRTZXJ2aWNlT2JzZXJ2YWJpbGl0eVByb3BzICE9IG51bGwpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmV3IEluc3RydW1lbnRlZFNlcnZpY2VNdWx0aUFaT2JzZXJ2YWJpbGl0eSh0aGlzLCBcIkZ1bGx5SW5zdHJ1bWVudGVkU2VydmljZU9ic2VydmFiaWxpdHlcIiwge1xuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlOiBwcm9wcy5pbnN0cnVtZW50ZWRTZXJ2aWNlT2JzZXJ2YWJpbGl0eVByb3BzLnNlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgIG91dGxpZXJUaHJlc2hvbGQ6IHByb3BzLmluc3RydW1lbnRlZFNlcnZpY2VPYnNlcnZhYmlsaXR5UHJvcHMub3V0bGllclRocmVzaG9sZCxcbiAgICAgICAgICAgICAgICAgICAgbG9hZEJhbGFuY2VyOiBwcm9wcy5pbnN0cnVtZW50ZWRTZXJ2aWNlT2JzZXJ2YWJpbGl0eVByb3BzLmxvYWRCYWxhbmNlcixcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRGFzaGJvYXJkczogcHJvcHMuaW5zdHJ1bWVudGVkU2VydmljZU9ic2VydmFiaWxpdHlQcm9wcy5jcmVhdGVEYXNoYm9hcmRzLFxuICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbDogcHJvcHMuaW5zdHJ1bWVudGVkU2VydmljZU9ic2VydmFiaWxpdHlQcm9wcy5pbnRlcnZhbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgfVxuICAgIH1cbn0iXX0=