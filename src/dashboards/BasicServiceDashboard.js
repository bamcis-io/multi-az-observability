"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicServiceDashboard = void 0;
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const constructs_1 = require("constructs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
class BasicServiceDashboard extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        let widgets = [];
        widgets.push(BasicServiceDashboard.createTopLevelAlarmWidgets(props.zonalAggregateIsolatedImpactAlarms));
        if (props.zonalLoadBalancerIsolatedImpactAlarms !== undefined && props.zonalLoadBalancerFaultRateMetrics !== undefined) {
            widgets.push(BasicServiceDashboard.createLoadBalancerWidgets(props.zonalLoadBalancerIsolatedImpactAlarms, props.zonalLoadBalancerFaultRateMetrics));
        }
        if (props.zonalNatGatewayIsolatedImpactAlarms !== undefined && props.zonalNatGatewayPacketDropMetrics !== undefined) {
            widgets.push(BasicServiceDashboard.createNatGatewayWidgets(props.zonalNatGatewayIsolatedImpactAlarms, props.zonalNatGatewayPacketDropMetrics));
        }
        this.dashboard = new aws_cloudwatch_1.Dashboard(this, "BasicServiceDashboard", {
            dashboardName: props.serviceName.toLowerCase() + aws_cdk_lib_1.Fn.sub("-service-${AWS::Region}"),
            defaultInterval: props.interval,
            periodOverride: aws_cloudwatch_1.PeriodOverride.INHERIT,
            widgets: widgets
        });
    }
    static createLoadBalancerWidgets(alarms, metrics) {
        let widgets = [];
        widgets.push(new aws_cloudwatch_1.TextWidget({
            markdown: "Load Balancer Fault Count Metrics",
            height: 2,
            width: 24
        }));
        let rowTracker = 0;
        Object.keys(alarms).forEach((availabilityZoneId, index) => {
            widgets.push(new aws_cloudwatch_1.GraphWidget({
                height: 6,
                width: 8,
                title: availabilityZoneId + " Load Balancer Faults",
                region: aws_cdk_lib_1.Fn.sub("${AWS::Region}"),
                left: [
                    metrics[availabilityZoneId]
                ],
                statistic: "Sum",
                leftYAxis: {
                    min: 0,
                    label: "Fault Count",
                    showUnits: false
                }
            }));
            //We're on the third one for this set, add 3 alarms
            //or if we're at the end, at the necessary amount
            //of alarms, 1, 2, or 3
            if (index % 3 == 2 || index - 1 == Object.keys(alarms).length) {
                for (let k = rowTracker; k <= index; k++) {
                    widgets.push(new aws_cloudwatch_1.AlarmWidget({
                        height: 2,
                        width: 8,
                        region: aws_cdk_lib_1.Fn.sub("${AWS::Region}"),
                        alarm: alarms[availabilityZoneId]
                    }));
                }
                rowTracker += index + 1;
            }
        });
        return widgets;
    }
    static createNatGatewayWidgets(alarms, metrics) {
        let widgets = [];
        widgets.push(new aws_cloudwatch_1.TextWidget({
            markdown: "NAT Gateway Dropped Packet Metrics",
            height: 2,
            width: 24
        }));
        let rowTracker = 0;
        Object.keys(alarms).forEach((availabilityZoneId, index) => {
            widgets.push(new aws_cloudwatch_1.GraphWidget({
                height: 6,
                width: 8,
                title: availabilityZoneId + " NAT Gateway Dropped Packets",
                region: aws_cdk_lib_1.Fn.sub("${AWS::Region}"),
                left: [
                    metrics[availabilityZoneId]
                ],
                statistic: "Sum",
                leftYAxis: {
                    min: 0,
                    label: "Dropped packets",
                    showUnits: false
                }
            }));
            //We're on the third one for this set, add 3 alarms
            //or if we're at the end, at the necessary amount
            //of alarms, 1, 2, or 3
            if (index % 3 == 2 || index - 1 == Object.keys(alarms).length) {
                for (let k = rowTracker; k <= index; k++) {
                    widgets.push(new aws_cloudwatch_1.AlarmWidget({
                        height: 2,
                        width: 8,
                        region: aws_cdk_lib_1.Fn.sub("${AWS::Region}"),
                        alarm: alarms[availabilityZoneId]
                    }));
                }
                rowTracker += index + 1;
            }
        });
        return widgets;
    }
    static createTopLevelAlarmWidgets(alarms) {
        let widgets = [];
        widgets.push(new aws_cloudwatch_1.TextWidget({
            markdown: "Availability Zone Isolated Impact Alarms",
            height: 2,
            width: 24
        }));
        Object.keys(alarms).forEach(availabilityZoneId => {
            widgets.push(new aws_cloudwatch_1.AlarmStatusWidget({
                alarms: [alarms[availabilityZoneId]],
                height: 2,
                width: 8,
                title: availabilityZoneId + " Aggregate Isolated Impact"
            }));
        });
        return widgets;
    }
}
exports.BasicServiceDashboard = BasicServiceDashboard;
//# sourceMappingURL=data:application/json;base64,